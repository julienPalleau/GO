//5-Les conditions dans le langage de programmation Go
//https://devopssec.fr/article/conditions-golang#begin-article-section

/*
 Ce chapitre vous explique les conditions en GoLang,. Ils permettent de tester vos variables. On apprendra √† utiliser les
 mots-cl√©s if, else if, else et switch et on fera le tour sur les diff√©rents op√©rateurs existant dans le langage de
 programmation Go.


 1 - Les pr√©requis

Maintenant que vous savez comment d√©clarer vos variables, il est temps de les tester avec des conditions !


1.1 - Entr√©e utilisateur

Avant de vous montrer comment cr√©er des conditions, je vais d'abord vous indiquer comment enregistrer une entr√©e utilisateur
dans une variable (nous utiliserons les entr√©es utilisateur plus tard dans la suite de ce chapitre et dans les prochains
chapitres)

Pour cela, on va utiliser la fonction NewScanner() de la biblioth√®que bufio. Cette fonction permet de cr√©er un nouveau scanner
qui nous permettra de capturer l'entr√©e utilisateur.

Voici comment elle s'utilise :

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    scanner := bufio.NewScanner(os.Stdin) // cr√©ation du scanner capturant une entr√©e utilisateur
    fmt.Print("Entrez quelque chose : ")
    scanner.Scan()                      // lancement du scanner
    entreeUtilisateur := scanner.Text() // stockage du r√©sultat du scanner dans une variable
    fmt.Println(entreeUtilisateur)
}

R√©sultat :

Entrez quelque chose : quelque chose
quelque chose


1.2 - Convertir une string en entier

J'ai une autre chose √† vous montrer avant de passer √† la suite. Pour le moment nous sommes capables de capturer que des chaines
de caract√®res, dans certains cas vous aurez besoin de capturer un type int √† la place d'un type string pour faire par exemple
des calculs.

Pour ce faire, il suffit de convertir le r√©sultat de votre scanner en int, une fonction nomm√©e Atoi() de la biblioth√®que strconv
est disponible pour r√©pondre √† ce besoin.
*/

// package main

// import (
// 	"bufio"
// 	"fmt"
// 	"os"
// 	"strconv"
// )

// func main() {
// 	scanner := bufio.NewScanner(os.Stdin)
// 	fmt.Print("Entrez un nombre entier : ")
// 	scanner.Scan()

// 	nbr, _ := strconv.Atoi(scanner.Text()) // conversion du type string en int

// 	fmt.Printf("res : %d\n", (nbr + 6))
// }

/*
2 - Les conditions

Maintenant promis on s'attaque aux conditions üòÖ.


2.1 - if, else

Imaginons le sc√©nario suivant : "un videur de bo√Æte de nuit fain√©ant d√©cide d'automatiser l'entr√©e des clients avec le langage de programmation Go."

Pour r√©pondre √† l'envie du videur, on va utiliser les conditions.

Pour cr√©er une condition il suffit d'utiliser le mot-cl√© if (qui se traduit en fran√ßais par "si") suivit de votre condition. Ensuite vous ouvrez une accolade { et fermez-la un peu plus loin }. Tout ce qui se trouve √† l'int√©rieur de vos accolades sera ex√©cut√© uniquement si la condition est bonne.

Pour revenir √† notre sc√©nario, on va d'abords commencer par respecter la loi en refusant les mineurs.
*/
// package main

// import (
//     "bufio"
//     "fmt"
//     "os"
//     "strconv"
// )

// func main() {
//     scanner := bufio.NewScanner(os.Stdin)
//     fmt.Print("Entrez votre age : ")
//     scanner.Scan()
//     age, err := strconv.Atoi(scanner.Text())
//     if err != nil {
//         // Si la conversion n'a pas fonctionn√© alors on affiche un message d'erreur et on quitte le programme
//         fmt.Println("On essaie de m'arnaquer ? all√© Dehors ! Et la prochaine entrez un entier !")
//         os.Exit(2) // on quitte le programmation
//     }

//     if age < 17 { // v√©rifier si l'utilisateur √† au moins 18 ans
//         fmt.Println("Sortez !")
//     } else { // si ce n'est pas le cas alors on l'accepte pas
//         fmt.Println("Entrez :)")
//     }
// }
/*
Information

nil est une valeur par d√©faut de plusieurs autres types de variables que nous d√©couvrirons dans d‚Äòautres chapitres

La derni√®re partie avec le mot-cl√© else (qui se traduit en fran√ßais par "autre") traite le cas o√π aucune des conditions n'a √©t√©
remplie (elle est optionnelle).
*/

/*
2.2 - Les op√©rateurs de comparaison

Dans notre ancien exemple nous avons utilis√© l'op√©rateur de comparaison <. En effet il existe d'autres types d'op√©rateurs que
je vais d√©crire √† travers le tableau ci-dessous

Op√©rateur 	Description 									Exemple 	R√©sultat
== 			Compare deux valeurs et v√©rifie leur √©galit√© 	x==4 		La condition est bonne si x est √©gal √† 4

< 			V√©rifie qu'une variable est strictement
			inf√©rieure √† une valeur 						x<4 		La condition est bonne si x est strictement
																		inf√©rieure √† 4

<= 			V√©rifie qu'une variable est inf√©rieure
			ou √©gale √† une valeur 							x<=4 		La condition est bonne si x est inf√©rieure ou √©gale
																		√† 4

> 			V√©rifie qu'une variable est strictement
			sup√©rieure √† une valeur 						x>4 		La condition est bonne si x est strictement sup√©rieure
																		√† 4

>= 			V√©rifie qu'une variable est sup√©rieure
			ou √©gale √† une valeur 							>=4 		La condition est bonne si x est sup√©rieure ou √©gale
																		√† 4
!= 			V√©rifie qu'une variable est diff√©rente
			√† une valeur 									>=4 		La condition est bonne si x est diff√©rent √† 4

Attention
Ne confondez pas l'op√©rateur d'√©galit√© == avec l'op√©rateur d'affectation =, le premier permet de comparer l'√©galit√© de deux
variables et le second d'affecter une valeur √† une variable !


2.3 - Les op√©rateurs logiques

Les op√©rateurs logiques vont nous permettre de v√©rifier si plusieurs conditions sont bonnes. Il existe trois types d'op√©rateurs logiques :
Op√©rateur 	Signification 	Description
|| 	OU 	Vrai si au moins une des comparaisons est vraie
&& 	ET 	Vrai si toutes les comparaisons sont vraies
! 	NON 	Retourne faux si la comparaison est vraie et vraie si la comparaison est fausse


2.4 - else if

Suite du sc√©nario : "Le videur a laiss√© sa place √† un nouveau videur tr√®s fain√©ant aussi (on ne change pas une √©quipe qui gagne üòâ) mais bon il est un peu sp√©cial ..."

Tant mieux car au moins avec lui on va pouvoir utiliser les op√©rateurs logiques vu pr√©c√©demment !

Voici les caract√©ristiques du nouveau videur :

    Le nouveau videur n'aime pas le pr√©nom Hatim ou hatim (je ne me sens pas vis√© üò¢)
    Le nouveau videur a tendance √† changer d'humeur de temps en temps et quand il n'est pas content il d√©cide alors de virer les personnes ayant 18 ans

Les op√©rateurs de comparaison ne vont pas nous suffire, il nous faut un moyen pour tester d'autres conditions quand la premi√®re condition n'est pas vrai. Ce cas est g√©rable avec le mot-cl√© else if (qui se traduit en fran√ßais par "sinon si"). La syntaxe ressemble √† celle du mot-cl√© if.

Dans cet exemple je vais utiliser la biblioth√®que math/rand pour apporter de l'al√©atoire √† notre code
*/

// package main

// import (
//     "bufio"
//     "fmt"
//     "math/rand"
//     "os"
//     "strconv"
//     "time"
// )

// func main() {
//     scanner := bufio.NewScanner(os.Stdin)
//     fmt.Print("Entrez votre age : ")
//     scanner.Scan()
//     age, err := strconv.Atoi(scanner.Text())
//     if err != nil {
//         fmt.Println("On essaie de m'arnaquer ? all√© Dehors ! Et la prochaine entrez un entier !")
//         os.Exit(2)
//     }

//     fmt.Print("Entrez votre prenom : ")
//     scanner.Scan()
//     prenom := scanner.Text()

//     /*
//         On a besoin de changer la graine (g√©n√©rateur de nombres pseudo-al√©atoires) √†
//         chaque ex√©cution de programmation sinon on obtiendra le m√™me nombre al√©atoire
//     */
//     rand.Seed(time.Now().UnixNano())
//     radomInt := rand.Intn(2) // retourne al√©atoirement soit 1 soit 0
//     radomInt2 := rand.Intn(2)

//     if age < 18 {
//         fmt.Println("Sortez !")
//     } else if prenom == "Hatim" || prenom == "hatim" {
//         fmt.Println("Ah c'est toi Hatim, dehors !")
//     } else if age == 18 && radomInt == 1 { // si le client est chanceux et qu'il a 18 ans
//         fmt.Println("Hum vous avez de la chance je suis de bonne humeur, entrez !")
//     } else if radomInt2 == 0 {
//         fmt.Println("Vous n'avez vraiment pas de chance sortez !")
//     } else {
//         fmt.Println("Entrez :)")
//     }

// }

/*
switch, case

Une instruction switch permet de tester l'√©galit√© d'une variable par rapport √† une liste de valeurs (id√©al pour le choix
dans un menu !).
*/
// package main

// import (
//     "bufio"
//     "fmt"
//     "os"
//     "strconv"
// )

// func main() {
//     scanner := bufio.NewScanner(os.Stdin)
//     fmt.Print("Votre choix : ")
//     scanner.Scan()
//     choix, err := strconv.Atoi(scanner.Text())
//     if err != nil {
//         fmt.Println("Entrez un entier !")
//         os.Exit(2)
//     }

//     switch choix { // la variable qu'on souhaite v√©rifier
//         case 0, 1: // 1 ou 0
//             println("George Boole !")
//         case 7:
//             println("William Van de Walle!")
//         case 23:
//             println("Pour certains, le nombre 23 est source de nombreux myst√®res, qu'en penses-tu Jim Carrey?")
//         case 42:
//             println("la r√©ponse √† la question ultime du sens de la vie!")
//         case 666:
//             println("Quand le diable veut une √¢me, le mal devient s√©duisant.")
//         default:
//             println("Mauvais choix !") // Valeur par d√©faut
//     }
// }
// le mot-cl√© default correspond au choix par d√©faut comme le mot-cl√© else.

/*
Voici un autre exemple qui nous permet de savoir si on est en week-end ou pas, dans cet exemple nous utiliserons les fonctions
Now().Weekday() de la biblioth√®que time :
*/
// package main

// import (
//     "fmt"
//     "time"
// )

// func main() {
//     switch time.Now().Weekday() {
//     case time.Saturday:
//         fmt.Println("Il est samedi")
//     case time.Sunday:
//         fmt.Println("Il est dimanche")
//     default:
//         fmt.Println("au boulot ! Le week-end est fini")
//     }
// }

/*
2.6 - Le switch dur √† cuire

Sur d'autres langages de programmation il n'est pas toujours tol√©r√© d'utiliser des op√©rateurs logiques ou des op√©rateurs de
conditions dans votre instruction switch. Sur Go s'est tol√©r√©, mais dans ce cas il ne faut pas rajouter votre variable apr√®s
votre mot-cl√© switch (d'ailleurs vous √™tre libre de v√©rifier n'importe quoi vu que le switch ne se base plus sur une variable).
*/
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"time"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	fmt.Print("Votre choix : ")
	scanner.Scan()
	choix, err := strconv.Atoi(scanner.Text())
	if err != nil {
		fmt.Println("Entrez un entier !")
		os.Exit(2)
	}

	switch {
	case choix >= 2000:
		println("Ah un 2000 !")
	case choix >= 1939 && choix <= 1945:
		println("Triste ann√©e")
	case time.Now().Weekday() == time.Sunday:
		println("Dimanche !")
	default:
		println("Mauvais choix !") // Valeur par d√©faut
	}
}
